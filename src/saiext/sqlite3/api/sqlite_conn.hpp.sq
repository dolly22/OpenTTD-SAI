/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "sqlite_conn.hpp"

namespace SQConvert {
	/* Allow SqliteConn to be used as Squirrel parameter */
	template <> SqliteConn *GetParam(ForceType<SqliteConn *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SqliteConn *)instance; }
	template <> SqliteConn &GetParam(ForceType<SqliteConn &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SqliteConn *)instance; }
	template <> const SqliteConn *GetParam(ForceType<const SqliteConn *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SqliteConn *)instance; }
	template <> const SqliteConn &GetParam(ForceType<const SqliteConn &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SqliteConn *)instance; }
	template <> int Return<SqliteConn *>(HSQUIRRELVM vm, SqliteConn *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "SqliteConn", res, NULL, DefSQDestructorCallback<SqliteConn>); return 1; }
} // namespace SQConvert

void SQSqliteConn_Register(Squirrel *engine)
{
	DefSQClass <SqliteConn> SQSqliteConn("SqliteConn");
	SQSqliteConn.PreRegister(engine);
	SQSqliteConn.AddConstructor<void (SqliteConn::*)(), 1>(engine, "x");

	SQSqliteConn.DefSQMethod(engine, &SqliteConn::Open,               "Open",               2, "x.");
	SQSqliteConn.DefSQMethod(engine, &SqliteConn::Close,              "Close",              2, "xb");
	SQSqliteConn.DefSQMethod(engine, &SqliteConn::CreateCommand,      "CreateCommand",      2, "x.");
	SQSqliteConn.DefSQMethod(engine, &SqliteConn::FinalizeStatements, "FinalizeStatements", 1, "x");
	SQSqliteConn.DefSQMethod(engine, &SqliteConn::Exec,               "Exec",               2, "x.");
	SQSqliteConn.DefSQMethod(engine, &SqliteConn::GetLastAutoId,      "GetLastAutoId",      1, "x");

	SQSqliteConn.PostRegister(engine);
}
