/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "sai_server.hpp"

namespace SQConvert {
	/* Allow SAIServer to be used as Squirrel parameter */
	template <> SAIServer *GetParam(ForceType<SAIServer *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SAIServer *)instance; }
	template <> SAIServer &GetParam(ForceType<SAIServer &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SAIServer *)instance; }
	template <> const SAIServer *GetParam(ForceType<const SAIServer *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SAIServer *)instance; }
	template <> const SAIServer &GetParam(ForceType<const SAIServer &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SAIServer *)instance; }
	template <> int Return<SAIServer *>(HSQUIRRELVM vm, SAIServer *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "SAIServer", res, NULL, DefSQDestructorCallback<SAIServer>); return 1; }
} // namespace SQConvert

void SQSAIServer_Register(Squirrel *engine)
{
	DefSQClass <SAIServer> SQSAIServer("SAIServer");
	SQSAIServer.PreRegister(engine);
	SQSAIServer.AddConstructor<void (SAIServer::*)(), 1>(engine, "x");

	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::Say,                      "Say",                      2, "..");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::SayClient,                "SayClient",                3, ".i.");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::SayCompany,               "SayCompany",               3, ".i.");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::ConsoleCmd,               "ConsoleCmd",               2, "..");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::GetExecuteCommandCompany, "GetExecuteCommandCompany", 1, ".");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::SetExecuteCommandCompany, "SetExecuteCommandCompany", 2, ".i");
	SQSAIServer.DefSQStaticMethod(engine, &SAIServer::ExecuteCommand,           "ExecuteCommand",           6, ".iiii.");

	SQSAIServer.PostRegister(engine);
}
