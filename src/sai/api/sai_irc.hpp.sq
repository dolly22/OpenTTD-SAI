/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "sai_irc.hpp"

namespace SQConvert {
	/* Allow SAIIrc to be used as Squirrel parameter */
	template <> SAIIrc *GetParam(ForceType<SAIIrc *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SAIIrc *)instance; }
	template <> SAIIrc &GetParam(ForceType<SAIIrc &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SAIIrc *)instance; }
	template <> const SAIIrc *GetParam(ForceType<const SAIIrc *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (SAIIrc *)instance; }
	template <> const SAIIrc &GetParam(ForceType<const SAIIrc &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(SAIIrc *)instance; }
	template <> int Return<SAIIrc *>(HSQUIRRELVM vm, SAIIrc *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "SAIIrc", res, NULL, DefSQDestructorCallback<SAIIrc>); return 1; }
}; // namespace SQConvert

void SQSAIIrc_Register(Squirrel *engine)
{
	DefSQClass <SAIIrc> SQSAIIrc("SAIIrc");
	SQSAIIrc.PreRegister(engine);
	SQSAIIrc.AddConstructor<void (SAIIrc::*)(), 1>(engine, "x");

	SQSAIIrc.DefSQStaticMethod(engine, &SAIIrc::Message,     "Message",     2, "..");
	SQSAIIrc.DefSQStaticMethod(engine, &SAIIrc::MessageNick, "MessageNick", 3, "...");
	SQSAIIrc.DefSQStaticMethod(engine, &SAIIrc::Notice,      "Notice",      2, "..");
	SQSAIIrc.DefSQStaticMethod(engine, &SAIIrc::NoticeNick,  "NoticeNick",  3, "...");
	SQSAIIrc.DefSQStaticMethod(engine, &SAIIrc::RawCommand,  "RawCommand",  2, "..");

	SQSAIIrc.PostRegister(engine);
}
